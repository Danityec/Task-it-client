[{"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\index.js":"1","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Router\\router.js":"2","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Header.js":"3","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Footer.js":"4","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Menu.js":"5","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\homePage\\HomePage.js":"6","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\TemplateList.js":"7","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\ChatList.js":"8","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Chat.js":"9","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\task\\Task.js":"10","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\Template.js":"11","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Popup.js":"12","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\List.js":"13","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\ListItem.js":"14","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Message.js":"15","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\admin\\AdminHomePage.js":"16","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\login\\Login.js":"17"},{"size":301,"mtime":1611671368837,"results":"18","hashOfConfig":"19"},{"size":1152,"mtime":1612621670791,"results":"20","hashOfConfig":"19"},{"size":2662,"mtime":1612621670748,"results":"21","hashOfConfig":"19"},{"size":324,"mtime":1611671368831,"results":"22","hashOfConfig":"19"},{"size":952,"mtime":1611992251630,"results":"23","hashOfConfig":"19"},{"size":2521,"mtime":1612637465755,"results":"24","hashOfConfig":"19"},{"size":2546,"mtime":1612621670781,"results":"25","hashOfConfig":"19"},{"size":3842,"mtime":1612621670699,"results":"26","hashOfConfig":"19"},{"size":2502,"mtime":1612621670684,"results":"27","hashOfConfig":"19"},{"size":12873,"mtime":1612621670765,"results":"28","hashOfConfig":"19"},{"size":1359,"mtime":1612537244160,"results":"29","hashOfConfig":"19"},{"size":1816,"mtime":1612529691366,"results":"30","hashOfConfig":"19"},{"size":606,"mtime":1612039737928,"results":"31","hashOfConfig":"19"},{"size":2254,"mtime":1612529691358,"results":"32","hashOfConfig":"19"},{"size":344,"mtime":1611919993576,"results":"33","hashOfConfig":"19"},{"size":3736,"mtime":1612621670674,"results":"34","hashOfConfig":"19"},{"size":1344,"mtime":1612621670732,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"10ovlwd",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\index.js",[],["76","77"],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Router\\router.js",["78"],"import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport Header from \"../Components/shared/Header\";\r\nimport Footer from \"../Components/shared/Footer\";\r\nimport HomePage from \"../Components/homePage/HomePage\";\r\nimport TemplateList from \"../Components/template/TemplateList\";\r\nimport ChatList from \"../Components/chat/ChatList\";\r\nimport Chat from \"../Components/chat/Chat\";\r\nimport Task from \"../Components/task/Task\";\r\nimport AdminHomePage from \"../Components/admin/AdminHomePage\";\r\nimport Login from \"../Components/login/Login\";\r\n\r\nconst ReactRouter = () => {\r\n    return (\r\n        <>\r\n            <Route exact path='/' component={Login}/>\r\n            <Route path='/dashboard' component={HomePage}/>\r\n            <Route path='/new-task' component={TemplateList}/>\r\n            <Route path='/chats' component={ChatList}/>\r\n            <Route path='/chat' component={Chat}/>\r\n            <Route path='/task' component={Task}/>\r\n            <Route exact path='/admin' component={AdminHomePage}/>\r\n            <Route path='/admin/template' component={Task}/>\r\n\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReactRouter","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Header.js",["79"],"import React, { useRef, useState } from \"react\";\r\nimport {NavLink, Redirect, useHistory} from \"react-router-dom\";\r\nimport {Avatar, MenuItem, MenuList, Grow, Popper, ClickAwayListener, Paper, ButtonBase} from \"@material-ui/core\";\r\nimport './Header.css'\r\n// import axios from 'axios';\r\nimport { SettingsInputAntennaTwoTone } from \"@material-ui/icons\";\r\n\r\n\r\nconst Header = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = useRef(null);\r\n    let history = useHistory();\r\n    // const [logout, setLogout] = useState(false);\r\n\r\n\r\n    const logout = () => {\r\n        // localStorage.removeItem(\"token\");\r\n        // setLogout(true)\r\n        fetch(`http://localhost:3000/authLogin/logout`, {\r\n            method: 'GET',\r\n        })\r\n        .then(res => {\r\n            console.log(res);\r\n            history.push('/')\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n\r\nreturn (\r\n    <div className={\"header\"}>\r\n        <div className={'header-content'}>\r\n            <NavLink exact to=\"/\" className={'logo'} />\r\n            {props.userId ? (\r\n                <div>\r\n                    <Avatar className={'user-avatar'}\r\n                        ref={anchorRef} aria-controls={open ? 'menu-list' : undefined}\r\n                        aria-haspopup=\"true\" onClick={() => setOpen(prevOpen => !prevOpen)}>\r\n                    </Avatar>\r\n                    <Popper open={open} anchorEl={anchorRef.current} placement={'bottom-end'} transition>\r\n                        {({ TransitionProps }) => (\r\n                            <Grow {...TransitionProps} style={{ transformOrigin: 'right top' }}>\r\n                                <Paper style={{ backgroundColor: '#2A73CC' }}>\r\n                                    <ClickAwayListener onClickAway={() => setOpen(false)}>\r\n                                        <MenuList id=\"menu-list\">\r\n                                            <MenuItem><NavLink className={'menu-list-item'} to='/account'>Account</NavLink></MenuItem>\r\n                                            <MenuItem><NavLink className={'menu-list-item'} to='/my-reviews'>My Reviews</NavLink></MenuItem>\r\n                                            <MenuItem><ButtonBase className={'menu-list-item'} style={{color: '#EDF5FF', fontSize: '100%'}} onClick={logout}>Logout</ButtonBase></MenuItem>\r\n                                        </MenuList>\r\n                                    </ClickAwayListener>\r\n                                </Paper>\r\n                            </Grow>)}\r\n                    </Popper>\r\n                </div>\r\n            ) : null}\r\n\r\n        </div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Header","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Footer.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Menu.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\homePage\\HomePage.js",["80","81","82"],"import React, {useEffect, useState} from 'react';\r\nimport './HomePage.css'\r\nimport Menu from \"../shared/Menu\";\r\nimport {ButtonBase} from \"@material-ui/core\";\r\nimport List from \"../shared/List\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Header from \"../shared/Header\";\r\nimport axios from \"axios\";\r\n\r\n// const userId = '106859904573047383930'\r\n\r\nconst HomePage = (props) => {\r\n    const [taskList, setTaskList] = useState([]);\r\n    const [titleList, setTitleList] = useState({});\r\n    const [userId, setUserId] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setUserId(props.location.data.googleID)\r\n        console.log(\"userId: \"+props.location.data.googleID)\r\n    })\r\n\r\n    useEffect(() => {\r\n        // fetch(`http://127.0.0.1:3000/api/tasks?userID=${userId}`)\r\n        //     .then(response => response.json())\r\n        //     .then(result => setTaskList(result))\r\n        axios.get('http://127.0.0.1:3000/api/tasks?userID=${userId}', {withCredentials: true, credentials: 'include'})\r\n            .then(res => {\r\n                console.log(res.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [userId])\r\n\r\n    useEffect(() => {\r\n        taskList.forEach((task) => {\r\n            setTitleList(prevState => ({\r\n                ...prevState, [task._id]: `${task.name}`\r\n            }));\r\n        })\r\n    }, [taskList])\r\n\r\n    const checkboxToggle = (id, completed) => {\r\n        const body = {\r\n            completed: completed\r\n        }\r\n        fetch(`http://127.0.0.1:3000/api/tasks/${id}`,\r\n            {headers: {'Content-Type': 'application/json'}, method: 'PUT', body: JSON.stringify(body)})\r\n            .then(response => response.json())\r\n            .then(result => {})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header userId={userId}/>\r\n            <Menu goBack={false} userId={userId}>\r\n                <Link to='/new-task'>\r\n                    <ButtonBase centerRipple={true}><p style={{width: '180px'}}>Create New Task</p></ButtonBase>\r\n                </Link>\r\n                <Link to='/chats'>\r\n                    <ButtonBase centerRipple={true} onClick={null} style={{ backgroundColor:'#2A73CC'}}><p style={{width: '100px'}}>Chat</p></ButtonBase>\r\n                </Link>\r\n            </Menu>\r\n            <div className={'task-list'}>\r\n                <List checkboxes={true} checkboxToggle={checkboxToggle} dataList={taskList} titleList={titleList}\r\n                      pathName={'/task'}/>\r\n            </div>\r\n        </>)\r\n}\r\n\r\nexport default HomePage","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\TemplateList.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\ChatList.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Chat.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\task\\Task.js",["83"],"import React, {useEffect, useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport './Task.css';\r\nimport Menu from \"../shared/Menu\";\r\nimport List from \"../shared/List\";\r\nimport Popup from \"../shared/Popup\";\r\nimport {TextField, ButtonBase, Modal, IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\r\n\r\nconst userId = '5fecb592690ca7935ccfd762'\r\n\r\nconst Task = (props) => {\r\n    let history = useHistory()\r\n\r\n    const [task, setTask] = useState(props.location.data);\r\n    const [currentSubTask, setCurrentSubTask] = useState(null);\r\n    const [titleList, setTitleList] = useState({});\r\n    const [emailList, setEmailList] = useState([]);\r\n    const [reviewList, setReviewList] = useState([]);\r\n    const [reviewBtnMessage, setReviewBtnMessage] = useState('Write a Review');\r\n\r\n    const [openEditTask, setOpenEditTask] = useState(false);\r\n    const [openDeleteTask, setOpenDeleteTask] = useState(false);\r\n    const [openAddSubTask, setOpenAddSubTask] = useState(false);\r\n    const [openEditSubTask, setOpenEditSubTask] = useState(false);\r\n    const [openDeleteSubTask, setOpenDeleteSubTask] = useState(false);\r\n    const [openReview, setOpenReview] = useState(false);\r\n    const [openReviewList, setOpenReviewList] = useState(false);\r\n\r\n    const [nameInput, setNameInput] = useState(\"\");\r\n    const [categoryInput, setCategoryInput] = useState(\"\");\r\n    const [emailInput, setEmailInput] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setTask(props.location.data)\r\n        fetch(`http://127.0.0.1:3000/api/users`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                result.forEach(user => setEmailList(prevArray => [...prevArray, {title: user['email']}]))\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (task.userID == null) {\r\n            fetch(`http://127.0.0.1:3000/api/reviews?templateID=${task.templateID}`)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    setReviewList(result)\r\n                })\r\n        }\r\n\r\n        task.subTask.forEach((subTask) => {\r\n            setTitleList(prevState => ({\r\n                ...prevState, [subTask[\"_id\"]]: `${subTask[\"name\"]}`\r\n            }));\r\n        })\r\n    }, [task])\r\n\r\n    const addReview = () => {\r\n        const body = {title: nameInput, reviewBody: categoryInput, userID: userId, templateID: task.templateID};\r\n        fetch(`http://localhost:3000/api/reviews`, {\r\n            method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenReview(false)\r\n                setReviewBtnMessage('Thank You!')\r\n                setCategoryInput('')\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const getUserEmail = () => {\r\n        if (emailInput != null) {\r\n            fetch(`http://127.0.0.1:3000/api/users?email=${emailInput.title}`)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    let shared = task.sharedWith\r\n                    shared.push(`${result['firstName']} ${result['lastName']}`)\r\n                    editTask(shared)\r\n                })\r\n        } else {\r\n            editTask(null)\r\n        }\r\n    }\r\n    const editTask = (shared) => {\r\n        const body = {name: nameInput, category: categoryInput, sharedWith: shared};\r\n        fetch(`http://localhost:3000/api/tasks/${task._id}`, {\r\n            method: 'PUT', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenEditTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n                setCategoryInput('')\r\n                setEmailInput(null)\r\n            });\r\n    }\r\n    const deleteTask = () => {\r\n        fetch(`http://localhost:3000/api/tasks/${task._id}`, {method: 'DELETE'})\r\n            .then(response => {\r\n            })\r\n            .then(result => history.goBack());\r\n    }\r\n\r\n    const addNewSubTask = () => {\r\n        const body = {name: nameInput};\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}`, {\r\n            method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenAddSubTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const editSubTask = () => {\r\n        const body = {name: nameInput};\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${currentSubTask}`, {\r\n            method: 'PUT', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenEditSubTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const deleteSubTask = () => {\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${currentSubTask}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenDeleteSubTask(false);\r\n                setTask(result)\r\n            });\r\n    }\r\n\r\n    const checkboxToggle = (id, completed) => {\r\n        const body = {completed: completed}\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${id}`,\r\n            {headers: {'Content-Type': 'application/json'}, method: 'PUT', body: JSON.stringify(body)})\r\n            .then(response => response.json())\r\n            .then(result => {\r\n            })\r\n    }\r\n    const getCurrentSubTask = (subTask, num) => {\r\n        setCurrentSubTask(subTask)\r\n        if (num === 1) setOpenDeleteSubTask(true)\r\n        else setOpenEditSubTask(true)\r\n    }\r\n\r\n    const eachReview = (item) => {\r\n        return (\r\n            <div key={item._id} className={'review-card'}>\r\n                <div className={'card-header'}>\r\n                    {item.title}\r\n                </div>\r\n                <div>\r\n                    {item.reviewBody}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const reviewListModal = (\r\n        <Modal className={'review-modal'} open={openReviewList} onClose={() => setOpenReviewList(false)}>\r\n            <div className={'review-page'}>\r\n                <ButtonBase className={'modal-close-btn'} onClick={() => setOpenReviewList(false)}>\r\n                    <CloseRoundedIcon/>\r\n                </ButtonBase>\r\n                <div className={'review-list'}>\r\n                    {reviewList.map(eachReview)}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n    const editSubTaskModal = (\r\n        <Popup onSubmit={editSubTask} title={\"Edit Subtask\"} open={openEditSubTask}\r\n               closePopup={() => setOpenEditSubTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" value={nameInput} onChange={e => setNameInput(e.target.value)} fullWidth/>\r\n        </Popup>\r\n    )\r\n    const deleteSubTaskModal = (\r\n        <Popup onSubmit={deleteSubTask} title={\"Delete Subtask\"} open={openDeleteSubTask}\r\n               closePopup={() => setOpenDeleteSubTask(false)} isDelete={true}>\r\n            <p style={{width: '340px'}}>Are you sure you want to delete this subtask?</p>\r\n            <p>the action cannot be undone!</p>\r\n        </Popup>\r\n    )\r\n    const createSubTaskModal = (\r\n        <Popup onSubmit={addNewSubTask} title={\"Create Subtask\"} open={openAddSubTask}\r\n               closePopup={() => setOpenAddSubTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" onChange={e => setNameInput(e.target.value)} fullWidth value={nameInput}/>\r\n        </Popup>\r\n    )\r\n    const editTaskModal = (\r\n        <Popup onSubmit={getUserEmail} title={\"Edit Task\"} open={openEditTask}\r\n               closePopup={() => setOpenEditTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" value={nameInput} onChange={e => setNameInput(e.target.value)}\r\n                       fullWidth/>\r\n            <TextField label=\"Category\" value={categoryInput}\r\n                       onChange={e => setCategoryInput(e.target.value)} fullWidth/>\r\n            {task.userID ? (\r\n                <Autocomplete\r\n                    style={{width: '100%', paddingTop: '5%'}}\r\n                    options={emailList} getOptionLabel={(emailList) => emailList.title} value={emailInput}\r\n                    onChange={(e, newValue) => setEmailInput(newValue)}\r\n                    renderInput={(params) => <TextField {...params} label=\"Email\"/>}/>\r\n            ) : null}\r\n        </Popup>\r\n    )\r\n    const deleteTaskModal = (\r\n        <Popup onSubmit={deleteTask} title={\"Delete Task\"} open={openDeleteTask}\r\n               closePopup={() => setOpenDeleteTask(false)} isDelete={true}>\r\n            <p style={{width: '340px'}}>Are you sure you want to delete this Task?</p>\r\n            <p>the action cannot be undone!</p>\r\n        </Popup>\r\n    )\r\n    const createReviewModal = (\r\n        <Popup onSubmit={addReview} title={\"Review the task Template\"} open={openReview}\r\n               closePopup={() => setOpenReview(false)} isDelete={false}>\r\n            <TextField label=\"Title\" onChange={e => setNameInput(e.target.value)} fullWidth value={nameInput}/>\r\n            <TextField style={{marginTop: '5%'}} label=\"Type here...\" multiline rows={3} variant=\"outlined\"\r\n                       onChange={e => setCategoryInput(e.target.value)} fullWidth value={categoryInput}/>\r\n        </Popup>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Menu goBack={true}>\r\n                <ButtonBase centerRipple={true} onClick={() => setOpenAddSubTask(true)}>\r\n                    <p style={{width: '200px'}}>Creat New SubTask</p>\r\n                </ButtonBase>\r\n                {task.templateID && task.userID ?\r\n                    (\r\n                        <ButtonBase style={{backgroundColor: '#2A73CC'}} centerRipple={true}\r\n                                    onClick={() => setOpenReview(true)}>\r\n                            <p style={{width: '200px'}}>{reviewBtnMessage}</p>\r\n                        </ButtonBase>\r\n                    ) : (\r\n                        <ButtonBase centerRipple={true} disabled={reviewList.length <= 0}\r\n                                    onClick={() => setOpenReviewList(true)} style={{backgroundColor: '#2A73CC'}}>\r\n                            <p style={{width: '100px'}}>Reviews</p>\r\n                        </ButtonBase>\r\n                    )}\r\n            </Menu>\r\n            <div className=\"task-page\">\r\n                <div className=\"task-info\">\r\n                    <div className=\"task-title\">\r\n                        <h1>{task.name}</h1>\r\n                        <div className={'task-btn-area'}>\r\n                            <IconButton>\r\n                                <EditIcon fontSize=\"large\" style={{color: '#FFDD65'}}\r\n                                          onClick={() => setOpenEditTask(true)}/>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <DeleteIcon fontSize=\"large\" style={{color: '#FF5C5C'}}\r\n                                            onClick={() => setOpenDeleteTask(true)}/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                    <h2 className=\"task-category\">\r\n                        {task.category}\r\n                    </h2>\r\n                    {task.sharedWith.length ? (\r\n                        <div className=\"task-shared-list\">\r\n                            <h3>Shared with:</h3>\r\n                            {task.sharedWith.map((item, i) => <span key={i}>{item}</span>)}\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n                <div className={'subtask-list'}>\r\n                    <List checkboxes={true} action={getCurrentSubTask} checkboxeToggle={checkboxToggle}\r\n                          dataList={task.subTask} titleList={titleList}/>\r\n                </div>\r\n                {editSubTaskModal}\r\n                {deleteSubTaskModal}\r\n                {createSubTaskModal}\r\n                {editTaskModal}\r\n                {deleteTaskModal}\r\n                {createReviewModal}\r\n                {reviewListModal}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\Template.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Popup.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\List.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\ListItem.js",[],["84","85"],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Message.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\admin\\AdminHomePage.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\login\\Login.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":14},{"ruleId":"90","severity":1,"message":"94","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":37},{"ruleId":"90","severity":1,"message":"95","line":13,"column":22,"nodeType":"92","messageId":"93","endLine":13,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":17,"column":5,"nodeType":"92","endLine":17,"endColumn":14,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":26,"column":19,"nodeType":"101","messageId":"102","endLine":26,"endColumn":69},{"ruleId":"96","severity":1,"message":"103","line":41,"column":8,"nodeType":"104","endLine":41,"endColumn":10,"suggestions":"105"},{"ruleId":"86","replacedBy":"106"},{"ruleId":"88","replacedBy":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'SettingsInputAntennaTwoTone' is defined but never used.","'setTaskList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setUserId'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.location.data.googleID] as a second argument to the useEffect Hook.",["110"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'props.location.data'. Either include it or remove the dependency array. If 'setTask' needs the current value of 'props.location.data', you can also switch to useReducer instead of useState and read 'props.location.data' in the reducer.","ArrayExpression",["111"],["108"],["109"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Add dependencies array: [props.location.data.googleID]",{"range":"116","text":"117"},"Update the dependencies array to be: [props.location.data]",{"range":"118","text":"119"},[674,674],", [props.location.data.googleID]",[1757,1759],"[props.location.data]"]