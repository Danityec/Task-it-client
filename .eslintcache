[{"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\index.js":"1","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Header.js":"2","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Footer.js":"3","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Menu.js":"4","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\homePage\\HomePage.js":"5","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\TemplateList.js":"6","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\ChatList.js":"7","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Chat.js":"8","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\task\\Task.js":"9","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\Template.js":"10","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Popup.js":"11","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\List.js":"12","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\ListItem.js":"13","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Message.js":"14","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\admin\\AdminHomePage.js":"15","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\login\\Login.js":"16","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Routers\\router.js":"17","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Routers\\UserRouter.js":"18","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Routers\\AdminRouter.js":"19"},{"size":408,"mtime":1613515502922,"results":"20","hashOfConfig":"21"},{"size":3087,"mtime":1613549225344,"results":"22","hashOfConfig":"21"},{"size":2030,"mtime":1613555638640,"results":"23","hashOfConfig":"21"},{"size":962,"mtime":1612860592223,"results":"24","hashOfConfig":"21"},{"size":2242,"mtime":1613588391468,"results":"25","hashOfConfig":"21"},{"size":2709,"mtime":1613515502891,"results":"26","hashOfConfig":"21"},{"size":4327,"mtime":1613515502819,"results":"27","hashOfConfig":"21"},{"size":2644,"mtime":1613515502808,"results":"28","hashOfConfig":"21"},{"size":13620,"mtime":1613562091128,"results":"29","hashOfConfig":"21"},{"size":1482,"mtime":1613586959833,"results":"30","hashOfConfig":"21"},{"size":1816,"mtime":1613562107327,"results":"31","hashOfConfig":"21"},{"size":636,"mtime":1613515502856,"results":"32","hashOfConfig":"21"},{"size":2472,"mtime":1613515502869,"results":"33","hashOfConfig":"21"},{"size":344,"mtime":1611919993576,"results":"34","hashOfConfig":"21"},{"size":3824,"mtime":1613515502799,"results":"35","hashOfConfig":"21"},{"size":2392,"mtime":1613560545233,"results":"36","hashOfConfig":"21"},{"size":1220,"mtime":1613515502914,"results":"37","hashOfConfig":"21"},{"size":412,"mtime":1613515502907,"results":"38","hashOfConfig":"21"},{"size":547,"mtime":1613515502899,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"10ovlwd",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\index.js",[],["83","84"],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Header.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Footer.js",["85"],"import React, {useEffect, useState} from \"react\";\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport './Footer.css'\r\nimport Popper from '@material-ui/core/Popper';\r\nimport {ButtonBase, ClickAwayListener} from '@material-ui/core';\r\n\r\n\r\nconst Footer = () => {\r\n    const [quote, setQuote] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n    const [open, setOpen] = useState(false)\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const quoteAPI = () => {\r\n        fetch(`http://localhost:3000/quotes`, {credentials: 'include'})\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setQuote(result[0].q)\r\n                setAuthor(result[0].a)\r\n                setOpen(true)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={\"footer\"}>\r\n                <CopyrightIcon className={'copy-right'}/>\r\n                <h6>TaskIt 2021</h6>\r\n            </div>\r\n            <div className={'buttonDiv'}>\r\n                <ButtonBase className={'buttonBase'} type=\"button\" style={{backgroundColor: '#34B467'}}\r\n                            onClick={(e) => {\r\n                                setAnchorEl(e.currentTarget);\r\n                                if (open) setOpen(false)\r\n                                else quoteAPI();\r\n                            }}>\r\n                    <p>New Quote</p>\r\n                </ButtonBase>\r\n            </div>\r\n            <ClickAwayListener onClickAway={() => setOpen(false)}>\r\n                <Popper open={open} anchorEl={anchorEl} placement={'top-end'}\r\n                        style={{minWidth: '200px', width: 'fit-content'}}>\r\n                    <div className={'popper'}>\r\n                        <p>Quote of the Day</p>\r\n                        <p className={'quote'}>{quote}</p>\r\n                        <p className={'author'}>{author}</p>\r\n                    </div>\r\n                </Popper>\r\n            </ClickAwayListener>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Menu.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\homePage\\HomePage.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\TemplateList.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\ChatList.js",["86","87"],"import React, {useEffect, useState} from 'react';\r\nimport './ChatList.css'\r\nimport Menu from \"../shared/Menu\";\r\nimport {ButtonBase} from \"@material-ui/core\";\r\nimport List from \"../shared/List\";\r\nimport Popup from \"../shared/Popup\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Header from \"../shared/Header\";\r\n\r\n// const userId = '106859904573047383930'\r\n\r\nconst ChatList = (props) => {\r\n    const [chatList, setChatList] = useState([]);\r\n    const [titleList, setTitleList] = useState({});\r\n    const [open, setOpen] = useState(false);\r\n    const [emailList, setEmailList] = useState([]);\r\n    const [emailValue, setEmailValue] = useState(null);\r\n    const [userId] = useState(props.location.userId)\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:3000/api/chats?userID=${userId}`, {credentials: 'include'})\r\n            .then(response => response.json())\r\n            .then(result => setChatList(result))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(chatList)\r\n        fetch(`http://localhost:3000/api/users`, {credentials: 'include'})\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                result.forEach(user => {\r\n                    setEmailList(prevArray => [...prevArray, {title: user['email']}])\r\n                })\r\n            })\r\n    }, [chatList])\r\n\r\n    useEffect(() => {\r\n        let users = []\r\n        chatList.forEach(chat => {\r\n            if (chat['userID1'] === userId)\r\n                users.push(chat['userID2'])\r\n            else\r\n                users.push(chat['userID1'])\r\n        })\r\n\r\n        users.forEach((user, index) => {\r\n            console.log(user)\r\n            fetch(`http://localhost:3000/api/users/${user}`, {credentials: 'include'})\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result)\r\n                    setTitleList(prevState => ({\r\n                        ...prevState, [chatList[index]._id]: `${result.firstName} ${result.lastName}`\r\n                    }));\r\n                })\r\n        })\r\n    }, [chatList])\r\n\r\n    const addNewChat = () => {\r\n        fetch(`http://localhost:3000/api/users?email=${emailValue.title}`, {credentials: 'include'})\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                const body = {userID1: userId, userID2: result['_id']};\r\n                fetch(`http://localhost:3000/api/chats/`, {\r\n                    method: 'POST',\r\n                    credentials: 'include',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(body),\r\n                })\r\n                    .then(response => response.json())\r\n                    .then(result => {\r\n                        setOpen(false)\r\n                        setChatList(result)\r\n                    });\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header userId={userId}/>\r\n            <Menu goBack={true} reroute={{pathname: '/dashboard', userId: userId}}>\r\n                <ButtonBase centerRipple={true} onClick={() => setOpen(true)}>\r\n                    <p style={{width: '150px'}}>New Chat</p>\r\n                </ButtonBase>\r\n            </Menu>\r\n            <div className={'chat-list-page'}>\r\n                <div className={'chat-list'}>\r\n                    <List dataList={chatList} userId={userId} titleList={titleList} pathName={'/chat'}/>\r\n                </div>\r\n                <Popup onSubmit={addNewChat} closePopup={() => setOpen(false)} title={\"New Chat\"} open={open}\r\n                       isDelete={false}>\r\n                    <p>open a new chat with another TaskIt user</p>\r\n                    <Autocomplete\r\n                        style={{width: '100%', paddingTop: '5%'}}\r\n                        options={emailList} getOptionLabel={(emailList) => emailList.title} value={emailValue}\r\n                        onChange={(e, newValue) => {\r\n                            setEmailValue(newValue)\r\n                        }}\r\n                        renderInput={(params) => <TextField {...params} label=\"Email\"/>}/>\r\n                </Popup>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatList","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Chat.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\task\\Task.js",["88"],"import React, {useEffect, useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport './Task.css';\r\nimport Menu from \"../shared/Menu\";\r\nimport List from \"../shared/List\";\r\nimport Popup from \"../shared/Popup\";\r\nimport {TextField, ButtonBase, Modal, IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\r\nimport Header from \"../shared/Header\";\r\nimport {useCookies} from \"react-cookie\";\r\nimport Input from '@material-ui/core/Input';\r\n\r\n\r\nconst Task = (props) => {\r\n    let history = useHistory()\r\n\r\n    const [task, setTask] = useState(props.location.data);\r\n    const [cookies] = useCookies(['user']);\r\n    const [currentSubTask, setCurrentSubTask] = useState(null);\r\n    const [titleList, setTitleList] = useState({});\r\n    const [emailList, setEmailList] = useState([]);\r\n    const [emailNameList, setEmailNameList] = useState([]);\r\n    const [reviewList, setReviewList] = useState([]);\r\n    const [reviewBtnMessage, setReviewBtnMessage] = useState('Write a Review');\r\n\r\n    const [openEditTask, setOpenEditTask] = useState(false);\r\n    const [openDeleteTask, setOpenDeleteTask] = useState(false);\r\n    const [openAddSubTask, setOpenAddSubTask] = useState(false);\r\n    const [openEditSubTask, setOpenEditSubTask] = useState(false);\r\n    const [openDeleteSubTask, setOpenDeleteSubTask] = useState(false);\r\n    const [openReview, setOpenReview] = useState(false);\r\n    const [openReviewList, setOpenReviewList] = useState(false);\r\n\r\n    const [nameInput, setNameInput] = useState(\"\");\r\n    const [categoryInput, setCategoryInput] = useState(\"\");\r\n    const [emailInput, setEmailInput] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:3000/api/users`, {credentials: 'include'})\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                result.forEach(user => setEmailList(prevArray => [...prevArray, {title: user['email']}]))\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (task.userID == null) {\r\n            fetch(`http://localhost:3000/api/reviews?templateID=${task.templateID}`, {credentials: 'include'})\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    setReviewList(result)\r\n                })\r\n        }\r\n\r\n        task.subTask.forEach((subTask) => {\r\n            setTitleList(prevState => ({\r\n                ...prevState, [subTask[\"_id\"]]: `${subTask[\"name\"]}`\r\n            }));\r\n        })\r\n        console.log(task.sharedWith)\r\n        task.sharedWith.forEach((email, i)=>{\r\n            console.log(i)\r\n            fetch(`http://localhost:3000/api/users?email=${email}`, {credentials: 'include'})\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    setEmailNameList(prevState =>\r\n                        [...prevState, `${result[\"firstName\"]} ${result[\"lastName\"]}`]\r\n                    )})\r\n        })\r\n\r\n    }, [task])\r\n\r\n    const addReview = () => {\r\n        const body = {title: nameInput, reviewBody: categoryInput, userID: cookies.user.googleID, templateID: task.templateID};\r\n        fetch(`http://localhost:3000/api/reviews`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenReview(false)\r\n                setReviewBtnMessage('Thank You!')\r\n                setCategoryInput('')\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const editTask = () => {\r\n        let shared = []\r\n        if (emailInput != null) {\r\n            shared = task.sharedWith\r\n            shared.push(emailInput.title)\r\n        }\r\n        const body = {name: nameInput, category: categoryInput, sharedWith: shared};\r\n        fetch(`http://localhost:3000/api/tasks/${task._id}`, {\r\n            method: 'PUT',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenEditTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n                setEmailNameList([])\r\n                setCategoryInput('')\r\n                setEmailInput(null)\r\n            });\r\n    }\r\n    const deleteTask = () => {\r\n        fetch(`http://localhost:3000/api/tasks/${task._id}`, {credentials: 'include', method: 'DELETE'})\r\n            .then(response => {\r\n            })\r\n            .then(result => history.goBack());\r\n    }\r\n\r\n    const addNewSubTask = () => {\r\n        const body = {name: nameInput};\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenAddSubTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const editSubTask = () => {\r\n        const body = {name: nameInput};\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${currentSubTask}`, {\r\n            method: 'PUT',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenEditSubTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const deleteSubTask = () => {\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${currentSubTask}`, {\r\n            method: 'DELETE', credentials: 'include'\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenDeleteSubTask(false);\r\n                setTask(result)\r\n            });\r\n    }\r\n\r\n    const checkboxToggle = (id, completed) => {\r\n        const body = {completed: completed}\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${id}`, {\r\n            method: 'PUT',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n            })\r\n    }\r\n    const getCurrentSubTask = (subTask, num) => {\r\n        setCurrentSubTask(subTask)\r\n        if (num === 1) setOpenDeleteSubTask(true)\r\n        else setOpenEditSubTask(true)\r\n    }\r\n\r\n    const eachReview = (item) => {\r\n        return (\r\n            <div key={item._id} className={'review-card'}>\r\n                <div className={'card-header'}>\r\n                    {item.title}\r\n                </div>\r\n                <div>\r\n                    {item.reviewBody}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const reviewListModal = (\r\n        <Modal className={'review-modal'} open={openReviewList} onClose={() => setOpenReviewList(false)}>\r\n            <div className={'review-page'}>\r\n                <ButtonBase className={'modal-close-btn'} onClick={() => setOpenReviewList(false)}>\r\n                    <CloseRoundedIcon/>\r\n                </ButtonBase>\r\n                <div className={'review-list'}>\r\n                    {reviewList.map(eachReview)}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n    const editSubTaskModal = (\r\n        <Popup onSubmit={editSubTask} title={\"Edit Subtask\"} open={openEditSubTask}\r\n               closePopup={() => setOpenEditSubTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" required value={nameInput} onChange={e => setNameInput(e.target.value)} fullWidth/>\r\n        </Popup>\r\n    )\r\n    const deleteSubTaskModal = (\r\n        <Popup onSubmit={deleteSubTask} title={\"Delete Subtask\"} open={openDeleteSubTask}\r\n               closePopup={() => setOpenDeleteSubTask(false)} isDelete={true}>\r\n            <p style={{width: '340px'}}>Are you sure you want to delete this subtask?</p>\r\n            <p>the action cannot be undone!</p>\r\n        </Popup>\r\n    )\r\n    const createSubTaskModal = (\r\n        <Popup onSubmit={addNewSubTask} title={\"Create Subtask\"} open={openAddSubTask}\r\n               closePopup={() => setOpenAddSubTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" onChange={e => setNameInput(e.target.value)} fullWidth value={nameInput}/>\r\n        </Popup>\r\n    )\r\n    const editTaskModal = (\r\n        <Popup onSubmit={editTask} title={\"Edit Task\"} open={openEditTask}\r\n               closePopup={() => setOpenEditTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" value={nameInput} onChange={e => setNameInput(e.target.value)}\r\n                       fullWidth/>\r\n            <TextField label=\"Category\" value={categoryInput}\r\n                       onChange={e => setCategoryInput(e.target.value)} fullWidth/>\r\n            {task.userID ? (\r\n                <Autocomplete\r\n                    style={{width: '100%', paddingTop: '5%'}}\r\n                    options={emailList} getOptionLabel={(emailList) => emailList.title} value={emailInput}\r\n                    onChange={(e, newValue) => setEmailInput(newValue)}\r\n                    renderInput={(params) => <TextField {...params} label=\"Email\"/>}/>\r\n            ) : null}\r\n        </Popup>\r\n    )\r\n    const deleteTaskModal = (\r\n        <Popup onSubmit={deleteTask} title={\"Delete Task\"} open={openDeleteTask}\r\n               closePopup={() => setOpenDeleteTask(false)} isDelete={true}>\r\n            <p style={{width: '340px'}}>Are you sure you want to delete this Task?</p>\r\n            <p>the action cannot be undone!</p>\r\n        </Popup>\r\n    )\r\n    const createReviewModal = (\r\n        <Popup onSubmit={addReview} title={\"Review the task Template\"} open={openReview}\r\n               closePopup={() => setOpenReview(false)} isDelete={false}>\r\n            <TextField label=\"Title\" onChange={e => setNameInput(e.target.value)} fullWidth value={nameInput}/>\r\n            <TextField style={{marginTop: '5%'}} label=\"Type here...\" multiline rows={3} variant=\"outlined\"\r\n                       onChange={e => setCategoryInput(e.target.value)} fullWidth value={categoryInput}/>\r\n        </Popup>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Menu goBack={true} reroute={{pathname: '/dashboard'}}>\r\n                <ButtonBase centerRipple={true} onClick={() => setOpenAddSubTask(true)}>\r\n                    <p style={{width: '200px'}}>Creat New SubTask</p>\r\n                </ButtonBase>\r\n                {task.templateID && task.userID ?\r\n                    (\r\n                        <ButtonBase style={{backgroundColor: '#2A73CC'}} centerRipple={true}\r\n                                    onClick={() => setOpenReview(true)}>\r\n                            <p style={{width: '200px'}}>{reviewBtnMessage}</p>\r\n                        </ButtonBase>\r\n                    ) : (\r\n                        <ButtonBase centerRipple={true} disabled={reviewList.length <= 0}\r\n                                    onClick={() => setOpenReviewList(true)} style={{backgroundColor: '#2A73CC'}}>\r\n                            <p style={{width: '100px'}}>Reviews</p>\r\n                        </ButtonBase>\r\n                    )}\r\n            </Menu>\r\n            <div className=\"task-page\">\r\n                <div className=\"task-info\">\r\n                    <div className=\"task-title\">\r\n                        <h1>{task.name}</h1>\r\n                        <div className={'task-btn-area'}>\r\n                            <IconButton>\r\n                                <EditIcon fontSize=\"large\" style={{color: '#FFDD65'}}\r\n                                          onClick={() => setOpenEditTask(true)}/>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <DeleteIcon fontSize=\"large\" style={{color: '#FF5C5C'}}\r\n                                            onClick={() => setOpenDeleteTask(true)}/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                    <h2 className=\"task-category\">\r\n                        {task.category}\r\n                    </h2>\r\n                    {task.sharedWith.length ? (\r\n                        <div className=\"task-shared-list\">\r\n                            <h3>Shared with:</h3>\r\n                            {emailNameList.map((item, i) => <span key={i}>{item}</span>)}\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n                <div className={'subtask-list'}>\r\n                    <List checkboxes={true} action={getCurrentSubTask} checkboxeToggle={checkboxToggle}\r\n                          dataList={task.subTask} titleList={titleList}/>\r\n                </div>\r\n                {editSubTaskModal}\r\n                {deleteSubTaskModal}\r\n                {createSubTaskModal}\r\n                {editTaskModal}\r\n                {deleteTaskModal}\r\n                {createReviewModal}\r\n                {reviewListModal}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task;","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\Template.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Popup.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\List.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\ListItem.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Message.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\admin\\AdminHomePage.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\login\\Login.js",["89","90"],"import React from 'react';\r\nimport './Login.css'\r\nimport {GoogleLogin} from 'react-google-login'\r\nimport Header from \"../shared/Header\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {useCookies} from \"react-cookie\";\r\n\r\nconst Login = (props) => {\r\n    let history = useHistory();\r\n    const [cookies, setCookie] = useCookies(['user']);\r\n\r\n    const googleSuccess = async (response) => {\r\n        const body = {token: response.tokenId}\r\n        fetch(`http://localhost:3000/authLogin`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                const cookiePromise = new Promise((resolve, reject) => {\r\n                    setCookie('user', result)\r\n                    resolve()\r\n                });\r\n                cookiePromise.then(() => {\r\n                    if (result)\r\n                        if (result.admin)\r\n                            history.push('/admin')\r\n                        else history.push('/dashboard')\r\n                })\r\n            });\r\n    }\r\n\r\n    const googleFailure = (response) => {\r\n        console.log(response);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'login-page'}>\r\n                <Header/>\r\n                <div className={'login-circle'}/>\r\n                <div className={'login-content'}>\r\n                    <div className={'login-btn'}>\r\n                        <h1>get productive!</h1>\r\n                        <GoogleLogin\r\n                            clientId='554171649210-i97q2kqu31t4hg021qdpmjn9kbobor0h.apps.googleusercontent.com'\r\n                            onSuccess={googleSuccess}\r\n                            onFailure={googleFailure}\r\n                        />\r\n                    </div>\r\n                    <div className={'login-text'}>\r\n                        <p>create and manage tasks and subtasks</p>\r\n                        <p>start from ready made templates</p>\r\n                        <p>share your tasks with your <br/> team, family or friends</p>\r\n                        <p>keep in touch with an <br/> inter-platform chat service</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Routers\\router.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Routers\\UserRouter.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Routers\\AdminRouter.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":16,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"100","line":25,"column":8,"nodeType":"101","endLine":25,"endColumn":10,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"100","line":58,"column":8,"nodeType":"101","endLine":58,"endColumn":18,"suggestions":"103"},{"ruleId":"95","severity":1,"message":"104","line":14,"column":8,"nodeType":"97","messageId":"98","endLine":14,"endColumn":13},{"ruleId":"95","severity":1,"message":"105","line":5,"column":9,"nodeType":"97","messageId":"98","endLine":5,"endColumn":17},{"ruleId":"95","severity":1,"message":"106","line":10,"column":12,"nodeType":"97","messageId":"98","endLine":10,"endColumn":19},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["109"],["110"],"'Input' is defined but never used.","'Redirect' is defined but never used.","'cookies' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [userId]",{"range":"115","text":"116"},"Update the dependencies array to be: [chatList, userId]",{"range":"117","text":"118"},[1001,1003],"[userId]",[2161,2171],"[chatList, userId]"]