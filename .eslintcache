[{"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\index.js":"1","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Router\\router.js":"2","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Header.js":"3","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Footer.js":"4","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Menu.js":"5","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\homePage\\HomePage.js":"6","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\TemplateList.js":"7","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\ChatList.js":"8","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Chat.js":"9","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\task\\Task.js":"10","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\Template.js":"11","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Popup.js":"12","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\List.js":"13","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\ListItem.js":"14","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Message.js":"15","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\admin\\AdminHomePage.js":"16","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\login\\Login.js":"17"},{"size":301,"mtime":1611671368837,"results":"18","hashOfConfig":"19"},{"size":1191,"mtime":1612537244195,"results":"20","hashOfConfig":"19"},{"size":2155,"mtime":1612521993606,"results":"21","hashOfConfig":"19"},{"size":324,"mtime":1611671368831,"results":"22","hashOfConfig":"19"},{"size":952,"mtime":1611992251630,"results":"23","hashOfConfig":"19"},{"size":1940,"mtime":1612537244108,"results":"24","hashOfConfig":"19"},{"size":2467,"mtime":1612537244176,"results":"25","hashOfConfig":"19"},{"size":3763,"mtime":1612537244075,"results":"26","hashOfConfig":"19"},{"size":2429,"mtime":1612537244051,"results":"27","hashOfConfig":"19"},{"size":12800,"mtime":1612537244129,"results":"28","hashOfConfig":"19"},{"size":1359,"mtime":1612537244160,"results":"29","hashOfConfig":"19"},{"size":1816,"mtime":1612529691366,"results":"30","hashOfConfig":"19"},{"size":606,"mtime":1612039737928,"results":"31","hashOfConfig":"19"},{"size":2254,"mtime":1612529691358,"results":"32","hashOfConfig":"19"},{"size":344,"mtime":1611919993576,"results":"33","hashOfConfig":"19"},{"size":3615,"mtime":1612529691331,"results":"34","hashOfConfig":"19"},{"size":911,"mtime":1612550182692,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"10ovlwd",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\index.js",[],["73","74"],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Router\\router.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Header.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Footer.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Menu.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\homePage\\HomePage.js",["75"],"import React, {useEffect, useState} from 'react';\r\nimport './HomePage.css'\r\nimport Menu from \"../shared/Menu\";\r\nimport {ButtonBase, CardActions, IconButton} from \"@material-ui/core\";\r\nimport List from \"../shared/List\";\r\nimport ArrowForwardIosRoundedIcon from \"@material-ui/icons/ArrowForwardIosRounded\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst userId = '5fecb592690ca7935ccfd762'\r\n\r\nconst HomePage = (props) => {\r\n    const [taskList, setTaskList] = useState([]);\r\n    const [titleList, setTitleList] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch(`http://127.0.0.1:3000/api/tasks?userID=${userId}`)\r\n            .then(response => response.json())\r\n            .then(result => setTaskList(result))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        taskList.forEach((task) => {\r\n            setTitleList(prevState => ({\r\n                ...prevState, [task._id]: `${task.name}`\r\n            }));\r\n        })\r\n    }, [taskList])\r\n\r\n    const checkboxToggle = (id, completed) => {\r\n        const body = {\r\n            completed: completed\r\n        }\r\n        fetch(`http://127.0.0.1:3000/api/tasks/${id}`,\r\n            {headers: {'Content-Type': 'application/json'}, method: 'PUT', body: JSON.stringify(body)})\r\n            .then(response => response.json())\r\n            .then(result => {})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Menu goBack={false}>\r\n                <Link to='/new-task'>\r\n                    <ButtonBase centerRipple={true}><p style={{width: '180px'}}>Create New Task</p></ButtonBase>\r\n                </Link>\r\n                <Link to='/chats'>\r\n                    <ButtonBase centerRipple={true} onClick={null} style={{ backgroundColor:'#2A73CC'}}><p style={{width: '100px'}}>Chat</p></ButtonBase>\r\n                </Link>\r\n            </Menu>\r\n            <div className={'task-list'}>\r\n                <List checkboxes={true} checkboxToggle={checkboxToggle} dataList={taskList} titleList={titleList}\r\n                      pathName={'/task'}>\r\n                    <IconButton>\r\n                        <ArrowForwardIosRoundedIcon/>\r\n                    </IconButton>\r\n                </List>\r\n            </div>\r\n        </>)\r\n}\r\n\r\nexport default HomePage","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\TemplateList.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\ChatList.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Chat.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\task\\Task.js",["76"],"import React, {useEffect, useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport './Task.css';\r\nimport Menu from \"../shared/Menu\";\r\nimport List from \"../shared/List\";\r\nimport Popup from \"../shared/Popup\";\r\nimport {TextField, ButtonBase, Modal, IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\r\n\r\nconst userId = '5fecb592690ca7935ccfd762'\r\n\r\nconst Task = (props) => {\r\n    let history = useHistory()\r\n\r\n    const [task, setTask] = useState(props.location.data);\r\n    const [currentSubTask, setCurrentSubTask] = useState(null);\r\n    const [titleList, setTitleList] = useState({});\r\n    const [emailList, setEmailList] = useState([]);\r\n    const [reviewList, setReviewList] = useState([]);\r\n    const [reviewBtnMessage, setReviewBtnMessage] = useState('Write a Review');\r\n\r\n    const [openEditTask, setOpenEditTask] = useState(false);\r\n    const [openDeleteTask, setOpenDeleteTask] = useState(false);\r\n    const [openAddSubTask, setOpenAddSubTask] = useState(false);\r\n    const [openEditSubTask, setOpenEditSubTask] = useState(false);\r\n    const [openDeleteSubTask, setOpenDeleteSubTask] = useState(false);\r\n    const [openReview, setOpenReview] = useState(false);\r\n    const [openReviewList, setOpenReviewList] = useState(false);\r\n\r\n    const [nameInput, setNameInput] = useState(\"\");\r\n    const [categoryInput, setCategoryInput] = useState(\"\");\r\n    const [emailInput, setEmailInput] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setTask(props.location.data)\r\n        fetch(`http://127.0.0.1:3000/api/users`)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                result.forEach(user => setEmailList(prevArray => [...prevArray, {title: user['email']}]))\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (task.userID == null) {\r\n            fetch(`http://127.0.0.1:3000/api/reviews?templateID=${task.templateID}`)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    setReviewList(result)\r\n                })\r\n        }\r\n\r\n        task.subTask.forEach((subTask) => {\r\n            setTitleList(prevState => ({\r\n                ...prevState, [subTask[\"_id\"]]: `${subTask[\"name\"]}`\r\n            }));\r\n        })\r\n    }, [task])\r\n\r\n    const addReview = () => {\r\n        const body = {title: nameInput, reviewBody: categoryInput, userID: userId, templateID: task.templateID};\r\n        fetch(`http://localhost:3000/api/reviews`, {\r\n            method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenReview(false)\r\n                setReviewBtnMessage('Thank You!')\r\n                setCategoryInput('')\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const getUserEmail = () => {\r\n        if (emailInput != null) {\r\n            fetch(`http://127.0.0.1:3000/api/users?email=${emailInput.title}`)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    let shared = task.sharedWith\r\n                    shared.push(`${result['firstName']} ${result['lastName']}`)\r\n                    editTask(shared)\r\n                })\r\n        } else {\r\n            editTask(null)\r\n        }\r\n    }\r\n    const editTask = (shared) => {\r\n        const body = {name: nameInput, category: categoryInput, sharedWith: shared};\r\n        fetch(`http://localhost:3000/api/tasks/${task._id}`, {\r\n            method: 'PUT', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenEditTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n                setCategoryInput('')\r\n                setEmailInput(null)\r\n            });\r\n    }\r\n    const deleteTask = () => {\r\n        fetch(`http://localhost:3000/api/tasks/${task._id}`, {method: 'DELETE'})\r\n            .then(response => {\r\n            })\r\n            .then(result => history.goBack());\r\n    }\r\n\r\n    const addNewSubTask = () => {\r\n        const body = {name: nameInput};\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}`, {\r\n            method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenAddSubTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const editSubTask = () => {\r\n        const body = {name: nameInput};\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${currentSubTask}`, {\r\n            method: 'PUT', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body),\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenEditSubTask(false);\r\n                setTask(result);\r\n                setNameInput('')\r\n            });\r\n    }\r\n    const deleteSubTask = () => {\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${currentSubTask}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setOpenDeleteSubTask(false);\r\n                setTask(result)\r\n            });\r\n    }\r\n\r\n    const checkboxToggle = (id, completed) => {\r\n        const body = {completed: completed}\r\n        fetch(`http://localhost:3000/api/subtasks/${task._id}/${id}`,\r\n            {headers: {'Content-Type': 'application/json'}, method: 'PUT', body: JSON.stringify(body)})\r\n            .then(response => response.json())\r\n            .then(result => {\r\n            })\r\n    }\r\n    const getCurrentSubTask = (subTask, num) => {\r\n        setCurrentSubTask(subTask)\r\n        if (num === 1) setOpenDeleteSubTask(true)\r\n        else setOpenEditSubTask(true)\r\n    }\r\n\r\n    const eachReview = (item) => {\r\n        return (\r\n            <div key={item._id} className={'review-card'}>\r\n                <div className={'card-header'}>\r\n                    {item.title}\r\n                </div>\r\n                <div>\r\n                    {item.reviewBody}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const reviewListModal = (\r\n        <Modal className={'review-modal'} open={openReviewList} onClose={() => setOpenReviewList(false)}>\r\n            <div className={'review-page'}>\r\n                <ButtonBase className={'modal-close-btn'} onClick={() => setOpenReviewList(false)}>\r\n                    <CloseRoundedIcon/>\r\n                </ButtonBase>\r\n                <div className={'review-list'}>\r\n                    {reviewList.map(eachReview)}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n    const editSubTaskModal = (\r\n        <Popup onSubmit={editSubTask} title={\"Edit Subtask\"} open={openEditSubTask}\r\n               closePopup={() => setOpenEditSubTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" value={nameInput} onChange={e => setNameInput(e.target.value)} fullWidth/>\r\n        </Popup>\r\n    )\r\n    const deleteSubTaskModal = (\r\n        <Popup onSubmit={deleteSubTask} title={\"Delete Subtask\"} open={openDeleteSubTask}\r\n               closePopup={() => setOpenDeleteSubTask(false)} isDelete={true}>\r\n            <p style={{width: '340px'}}>Are you sure you want to delete this subtask?</p>\r\n            <p>the action cannot be undone!</p>\r\n        </Popup>\r\n    )\r\n    const createSubTaskModal = (\r\n        <Popup onSubmit={addNewSubTask} title={\"Create Subtask\"} open={openAddSubTask}\r\n               closePopup={() => setOpenAddSubTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" onChange={e => setNameInput(e.target.value)} fullWidth value={nameInput}/>\r\n        </Popup>\r\n    )\r\n    const editTaskModal = (\r\n        <Popup onSubmit={getUserEmail} title={\"Edit Task\"} open={openEditTask}\r\n               closePopup={() => setOpenEditTask(false)} isDelete={false}>\r\n            <TextField label=\"Name\" value={nameInput} onChange={e => setNameInput(e.target.value)}\r\n                       fullWidth/>\r\n            <TextField label=\"Category\" value={categoryInput}\r\n                       onChange={e => setCategoryInput(e.target.value)} fullWidth/>\r\n            {task.userID ? (\r\n                <Autocomplete\r\n                    style={{width: '100%', paddingTop: '5%'}}\r\n                    options={emailList} getOptionLabel={(emailList) => emailList.title} value={emailInput}\r\n                    onChange={(e, newValue) => setEmailInput(newValue)}\r\n                    renderInput={(params) => <TextField {...params} label=\"Email\"/>}/>\r\n            ) : null}\r\n        </Popup>\r\n    )\r\n    const deleteTaskModal = (\r\n        <Popup onSubmit={deleteTask} title={\"Delete Task\"} open={openDeleteTask}\r\n               closePopup={() => setOpenDeleteTask(false)} isDelete={true}>\r\n            <p style={{width: '340px'}}>Are you sure you want to delete this Task?</p>\r\n            <p>the action cannot be undone!</p>\r\n        </Popup>\r\n    )\r\n    const createReviewModal = (\r\n        <Popup onSubmit={addReview} title={\"Review the task Template\"} open={openReview}\r\n               closePopup={() => setOpenReview(false)} isDelete={false}>\r\n            <TextField label=\"Title\" onChange={e => setNameInput(e.target.value)} fullWidth value={nameInput}/>\r\n            <TextField style={{marginTop: '5%'}} label=\"Type here...\" multiline rows={3} variant=\"outlined\"\r\n                       onChange={e => setCategoryInput(e.target.value)} fullWidth value={categoryInput}/>\r\n        </Popup>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Menu goBack={true}>\r\n                <ButtonBase centerRipple={true} onClick={() => setOpenAddSubTask(true)}>\r\n                    <p style={{width: '200px'}}>Creat New SubTask</p>\r\n                </ButtonBase>\r\n                {task.templateID && task.userID ?\r\n                    (\r\n                        <ButtonBase style={{backgroundColor: '#2A73CC'}} centerRipple={true}\r\n                                    onClick={() => setOpenReview(true)}>\r\n                            <p style={{width: '200px'}}>{reviewBtnMessage}</p>\r\n                        </ButtonBase>\r\n                    ) : (\r\n                        <ButtonBase centerRipple={true} disabled={reviewList.length <= 0}\r\n                                    onClick={() => setOpenReviewList(true)} style={{backgroundColor: '#2A73CC'}}>\r\n                            <p style={{width: '100px'}}>Reviews</p>\r\n                        </ButtonBase>\r\n                    )}\r\n            </Menu>\r\n            <div className=\"task-page\">\r\n                <div className=\"task-info\">\r\n                    <div className=\"task-title\">\r\n                        <h1>{task.name}</h1>\r\n                        <div className={'task-btn-area'}>\r\n                            <IconButton>\r\n                                <EditIcon fontSize=\"large\" style={{color: '#FFDD65'}}\r\n                                          onClick={() => setOpenEditTask(true)}/>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <DeleteIcon fontSize=\"large\" style={{color: '#FF5C5C'}}\r\n                                            onClick={() => setOpenDeleteTask(true)}/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                    <h2 className=\"task-category\">\r\n                        {task.category}\r\n                    </h2>\r\n                    {task.sharedWith.length ? (\r\n                        <div className=\"task-shared-list\">\r\n                            <h3>Shared with:</h3>\r\n                            {task.sharedWith.map((item, i) => <span key={i}>{item}</span>)}\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n                <div className={'subtask-list'}>\r\n                    <List checkboxes={true} action={getCurrentSubTask} checkboxeToggle={checkboxToggle}\r\n                          dataList={task.subTask} titleList={titleList}/>\r\n                </div>\r\n                {editSubTaskModal}\r\n                {deleteSubTaskModal}\r\n                {createSubTaskModal}\r\n                {editTaskModal}\r\n                {deleteTaskModal}\r\n                {createReviewModal}\r\n                {reviewListModal}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;","C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\template\\Template.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\Popup.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\List.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\shared\\ListItem.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\chat\\Message.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\admin\\AdminHomePage.js",[],"C:\\Users\\danit\\Documents\\Danit's Documents\\Shenkar\\Third year\\First Semester\\Distributed Cloud Services\\TaskIt_client\\src\\Components\\login\\Login.js",["77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":4,"column":21,"nodeType":"84","messageId":"85","endLine":4,"endColumn":32},{"ruleId":"86","severity":1,"message":"87","line":41,"column":8,"nodeType":"88","endLine":41,"endColumn":10,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"90","line":20,"column":7,"nodeType":"84","messageId":"85","endLine":20,"endColumn":20},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'CardActions' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.data'. Either include it or remove the dependency array. If 'setTask' needs the current value of 'props.location.data', you can also switch to useReducer instead of useState and read 'props.location.data' in the reducer.","ArrayExpression",["93"],"'googleFailure' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [props.location.data]",{"range":"96","text":"97"},[1757,1759],"[props.location.data]"]